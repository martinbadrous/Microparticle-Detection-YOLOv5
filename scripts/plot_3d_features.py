"""Visualise the 3D feature space generated by infer_video.py."""

from __future__ import annotations

import argparse
import logging
from pathlib import Path
from typing import Iterable, Optional

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401
import pandas as pd


def parse_args(argv: Optional[Iterable[str]] = None) -> argparse.Namespace:
    """Parse command-line arguments."""

    parser = argparse.ArgumentParser(
        description="Plot the 3D feature scatter from YOLO microparticle inference",
    )
    parser.add_argument(
        "--csv",
        default="reports/features_3d.csv",
        help="Path to the CSV generated by infer_video.py",
    )
    parser.add_argument(
        "--by",
        default="cls",
        help="Column name used for grouping and colouring (default: %(default)s)",
    )
    parser.add_argument(
        "--out",
        default="reports/features_3d.png",
        help="Output plot path (default: %(default)s)",
    )
    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        help="Logging verbosity",
    )
    return parser.parse_args(argv)


def setup_logging(level: str) -> None:
    """Configure basic logging."""

    logging.basicConfig(
        level=getattr(logging, level.upper(), logging.INFO),
        format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    )


def plot_features(args: argparse.Namespace) -> Path:
    """Load the CSV and plot the 3D feature scatter chart."""

    setup_logging(args.log_level)
    csv_path = Path(args.csv)
    if not csv_path.exists():
        raise FileNotFoundError(f"CSV file not found: {csv_path}")

    df = pd.read_csv(csv_path)
    if df.empty:
        logging.warning("Feature CSV is empty; plot will contain no points.")

    fig = plt.figure()
    ax = fig.add_subplot(111, projection="3d")

    for key, group in df.groupby(args.by):
        ax.scatter(group["area_px"], group["blur_var"], group["chi2"], label=str(key), s=10)

    ax.set_xlabel("Area (px)")
    ax.set_ylabel("Blur (Laplacian variance)")
    ax.set_zlabel("Chi-square distance")
    ax.legend()
    plt.tight_layout()

    out_path = Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    plt.savefig(out_path, dpi=200)
    logging.info("Saved plot to %s", out_path)
    return out_path


def main(argv: Optional[Iterable[str]] = None) -> None:
    """CLI entry point."""

    args = parse_args(argv)
    plot_features(args)


if __name__ == "__main__":  # pragma: no cover - CLI entry point
    main()

